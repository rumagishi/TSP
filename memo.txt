/******メモ******/

Streamが圧倒的に早い説
http://www.ne.jp/asahi/hishidama/home/tech/scala/collection/seq.html

distanceTableとかはactorのclassで継承できるようにしたほうがいい

/******メモ******/

MAIN :

初期探索点を複数(a1,a2,a3,a4,...)用意する => ACTOR 1に渡す
ACTOR 1 (a1)
ACTOR 1 (a2)
ACTOR 1 (a3)
ACTOR 1 (a4)
......


ACTOR 1 :

分割して近傍探索(a1_1,a1_2,a1_3,a1_4)する => ACTOR 2に渡す

//2-optの仕様:28通りの中からベストな1通りを返す => ACTOR 1自身を再帰?
//if 1234567通りの中からベストの1通りを取り出す => 死ぬ

val hoge: List[List[Int]] = 2-opt(a1) //候補のlistが返される

hogeを4分割．

近傍探索ACTOR 2(a1_1)
近傍探索ACTOR 2(a1_2)
近傍探索ACTOR 2(a1_3)
近傍探索ACTOR 2(a1_4)

ACTOR 2 :

分割された候補の中からベストな１つを返す．

ACTOR 1とACTOR 2の行ったり来たり．
if ACTOR 2の入力 == ACTOR 2の出力 then MAINに値を返す

val len = list.length
val cnt = list.length/4
var newList = List[List[List[Int]]]()
for(i <- 0 until (len/cnt)) {
    val j = i * cnt
    val p = list.slice(j, j+cnt)
    newList = p :: newList
}

Vector(List(1, 0, 2, 3, 4, 5, 6, 7), List(2, 1, 0, 3, 4, 5, 6, 7), List(3, 1, 2, 0, 4, 5, 6, 7), List(4, 1, 2, 3, 0, 5, 6, 7), List(5, 1, 2, 3, 4, 0, 6, 7), List(6, 1, 2, 3, 4, 5, 0, 7), List(7, 1, 2, 3, 4, 5, 6, 0), List(0, 2, 1, 3, 4, 5, 6, 7), List(0, 3, 2, 1, 4, 5, 6, 7), List(0, 4, 2, 3, 1, 5, 6, 7), List(0, 5, 2, 3, 4, 1, 6, 7), List(0, 6, 2, 3, 4, 5, 1, 7), List(0, 7, 2, 3, 4, 5, 6, 1), List(0, 1, 3, 2, 4, 5, 6, 7), List(0, 1, 4, 3, 2, 5, 6, 7), List(0, 1, 5, 3, 4, 2, 6, 7), List(0, 1, 6, 3, 4, 5, 2, 7), List(0, 1, 7, 3, 4, 5, 6, 2), List(0, 1, 2, 4, 3, 5, 6, 7), List(0, 1, 2, 5, 4, 3, 6, 7), List(0, 1, 2, 6, 4, 5, 3, 7), List(0, 1, 2, 7, 4, 5, 6, 3), List(0, 1, 2, 3, 5, 4, 6, 7), List(0, 1, 2, 3, 6, 5, 4, 7), List(0, 1, 2, 3, 7, 5, 6, 4), List(0, 1, 2, 3, 4, 6, 5, 7), List(0, 1, 2, 3, 4, 7, 6, 5), List(0, 1, 2, 3, 4, 5, 7, 6))

val div = 4
val hop = list.length/div
for(i <- 0 until div) {
    println(list.slice(hop*i, hop*i+hop))
}

================7/21================
並列化して，extends actorしたクラス内でprintlnして結果がちゃんと表示されているか確認する

一旦，mainメソッドに変えした結果を次のアクターに渡す感じにしてみる

================7/22================

actorからlistが帰ってこない => Seqとかほかの型に変換したできるか試してみること！
Future型から参照？javaのthreadから結果を取ってくるやり方を見てみるといいかも

================7/24================

valなactorを使うことで戻り値が帰ってきた．

最良な経路を見つけるために枝分かれを繰り返していく(再帰)が，どこでストップをかけるか -> actor内をぐるぐるさせることでできた

・近傍探索で得られたベターな経路の中からベストなものを選ぶ
・座標の入力をdatファイルからにする．
・近傍探索を4分割することはまだできていない．（コレクションに対してparメソッドをつけるか，コレクションを4分割する）

================7/28================

slicedList: Vector[List[List[Int]]]

・経路を行ったり来たりする件
/************************************/
/Users/e135761/parallel/TSP/TSP% scala Tsp 1
Vector(List(2, 6, 7, 0, 3, 1, 4, 5), List(2, 6, 1, 0, 7, 4, 3, 5), List(1, 0, 4, 3, 5, 6, 2, 7), List(0, 2, 3, 1, 6, 5, 4, 7), List(0, 1, 2, 3, 4, 5, 6, 7))
begin slice
end slice
List(3, 6, 7, 0, 2, 1, 4, 5)
begin slice
end slice
List(1, 6, 7, 0, 2, 3, 4, 5)
begin slice
end slice
List(0, 6, 7, 1, 2, 3, 4, 5)
begin slice
end slice
List(7, 6, 0, 1, 2, 3, 4, 5)
begin slice
end slice
List(6, 7, 0, 1, 2, 3, 4, 5)
begin slice
end slice
List(6, 7, 0, 1, 2, 3, 4, 5)
List(5, 7, 0, 1, 2, 3, 4, 6)
begin slice
end slice
List(5, 7, 0, 1, 2, 3, 4, 6)
List(6, 7, 0, 1, 2, 3, 4, 5)
begin slice
end slice
/************************************/

tempListが問題説
twoOptで入力は含めない？


================7/29================

全てのactorが終わった後にmain関数で結果表示すること．
いま現在では，Thread.sleep(1000)とかでしのいでる．

それから都市数が急激に多くなったときに，
(1)コレクションにparをつけることも考えておく．
(2)分割する個数を多くする（一つの分割単位で扱うリストの量を一定に保つ）．


================7/30================

解は List(92, 22, 50, 54, 38, 8, 82, 0, 76, 41, 20, 46, 81, 97, 95, 1, 3, 31, 11, 67, 72, 71, 33, 40, 12, 30, 27, 57, 4, 39, 9, 7, 91, 37, 2, 5, 55, 23, 60, 74, 90, 29, 35, 45, 84, 68, 59, 51, 58, 52, 48, 15, 10, 17, 83, 93, 28, 18, 21, 94, 62, 87, 61, 99, 69, 79, 26, 14, 47, 85, 96, 16, 19, 25, 32, 56, 44, 24, 13, 53, 78, 36, 73, 86, 6, 65, 34, 75, 49, 98, 89, 43, 66, 80, 77, 88, 64, 70, 42, 63)
その距離は 4250.918617788023
Suspended
       14.76 real        15.18 user         0.37 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala Tsp 8 100


解は List(65, 62, 17, 67, 1, 18, 14, 51, 91, 23, 95, 68, 63, 4, 92, 26, 75, 32, 86, 19, 36, 52, 87, 80, 99, 72, 58, 59, 98, 12, 9, 64, 16, 90, 85, 5, 27, 42, 76, 22, 84, 46, 28, 35, 56, 73, 48, 93, 43, 38, 20, 77, 53, 81, 45, 82, 71, 15, 83, 54, 24, 13, 89, 37, 3, 57, 33, 69, 11, 74, 78, 44, 41, 39, 61, 47, 34, 66, 25, 97, 10, 79, 6, 70, 2, 8, 94, 0, 49, 60, 21, 50, 29, 96, 31, 30, 88, 40, 55, 7)
その距離は 4522.053670003117
Suspended
        9.91 real        18.69 user         0.56 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala TspPar 8 100

の距離は 4503.267102988068
の距離は 4301.7536841029705

その距離は 4225.167676672891
その距離は 4491.030368037013

解は List(49, 94, 90, 32, 56, 75, 52, 84, 42, 18, 54, 27, 62, 33, 43, 4, 61, 2, 20, 60, 68, 29, 22, 65, 59, 64, 10, 71, 91, 47, 89, 39, 7, 79, 8, 92, 0, 97, 82, 15, 96, 14, 93, 83, 69, 31, 24, 17, 38, 48, 40, 5, 53, 81, 51, 16, 67, 9, 58, 41, 1, 74, 88, 11, 76, 3, 19, 80, 12, 63, 34, 73, 26, 55, 44, 87, 23, 57, 28, 45, 70, 46, 86, 30, 6, 72, 98, 35, 78, 50, 36, 77, 37, 25, 21, 85, 95, 13, 99, 66)
その距離は 4439.249606470931
Suspended
        9.89 real        18.76 user         0.58 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala TspPar 8 100
解は List(49, 94, 90, 32, 56, 75, 52, 84, 42, 18, 54, 27, 62, 33, 43, 4, 61, 2, 20, 60, 68, 29, 22, 65, 59, 64, 10, 71, 91, 47, 89, 39, 7, 79, 8, 92, 0, 97, 82, 15, 96, 14, 93, 83, 69, 31, 24, 17, 38, 48, 40, 5, 53, 81, 51, 16, 67, 9, 58, 41, 1, 74, 88, 11, 76, 3, 19, 80, 12, 63, 34, 73, 26, 55, 44, 87, 23, 57, 28, 45, 70, 46, 86, 30, 6, 72, 98, 35, 78, 50, 36, 77, 37, 25, 21, 85, 95, 13, 99, 66)
その距離は 4439.249606470931
Suspended
        9.36 real        18.54 user         0.54 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala TspPar 8 100


解は List(49, 94, 90, 32, 56, 75, 52, 84, 42, 18, 54, 27, 62, 33, 43, 4, 61, 2, 20, 60, 68, 29, 22, 65, 59, 64, 10, 71, 91, 47, 89, 39, 7, 79, 8, 92, 0, 97, 82, 15, 96, 14, 93, 83, 69, 31, 24, 17, 38, 48, 40, 5, 53, 81, 51, 16, 67, 9, 58, 41, 1, 74, 88, 11, 76, 3, 19, 80, 12, 63, 34, 73, 26, 55, 44, 87, 23, 57, 28, 45, 70, 46, 86, 30, 6, 72, 98, 35, 78, 50, 36, 77, 37, 25, 21, 85, 95, 13, 99, 66)
その距離は 4439.249606470931
Suspended
       14.76 real        15.18 user         0.37 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala Tsp 8 100
解は List(49, 94, 90, 32, 56, 75, 52, 84, 42, 18, 54, 27, 62, 33, 43, 4, 61, 2, 20, 60, 68, 29, 22, 65, 59, 64, 10, 71, 91, 47, 89, 39, 7, 79, 8, 92, 0, 97, 82, 15, 96, 14, 93, 83, 69, 31, 24, 17, 38, 48, 40, 5, 53, 81, 51, 16, 67, 9, 58, 41, 1, 74, 88, 11, 76, 3, 19, 80, 12, 63, 34, 73, 26, 55, 44, 87, 23, 57, 28, 45, 70, 46, 86, 30, 6, 72, 98, 35, 78, 50, 36, 77, 37, 25, 21, 85, 95, 13, 99, 66)
その距離は 4439.249606470931
Suspended
       14.69 real        15.11 user         0.37 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala Tsp 8 100


================7/31================

===リストの4分割せずにparメソッドを付けた===
解は List(64, 28, 7, 3, 27, 65, 1, 30, 45, 33, 47, 90, 4, 10, 69, 35, 5, 51, 2, 9, 23, 16, 74, 56, 11, 6, 52, 72, 63, 68, 92, 44, 15, 99, 80, 20, 13, 22, 61, 50, 55, 24, 0, 77, 39, 98, 85, 53, 73, 86, 81, 62, 97, 40, 78, 89, 17, 58, 21, 34, 70, 59, 84, 91, 32, 49, 19, 57, 66, 37, 83, 54, 76, 96, 12, 46, 75, 67, 93, 8, 94, 79, 25, 95, 71, 60, 36, 48, 29, 18, 41, 87, 82, 14, 88, 26, 38, 43, 42, 31)
その距離は 4329.349648801185
Suspended
        9.03 real        17.38 user         0.42 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala TspPar 10 100

===リストの4分割してparメソッドはつけてないやつ===
解は List(64, 28, 7, 3, 27, 65, 1, 30, 45, 33, 47, 90, 4, 10, 69, 35, 5, 51, 2, 9, 23, 16, 74, 56, 11, 6, 52, 72, 63, 68, 92, 44, 15, 99, 80, 20, 13, 22, 61, 50, 55, 24, 0, 77, 39, 98, 85, 53, 73, 86, 81, 62, 97, 40, 78, 89, 17, 58, 21, 34, 70, 59, 84, 91, 32, 49, 19, 57, 66, 37, 83, 54, 76, 96, 12, 46, 75, 67, 93, 8, 94, 79, 25, 95, 71, 60, 36, 48, 29, 18, 41, 87, 82, 14, 88, 26, 38, 43, 42, 31)
その距離は 4329.349648801185
Suspended
       15.03 real        15.07 user         0.41 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala Tsp 10 100

===リストの4分割してparメソッドをつけた場合===
解は List(64, 28, 7, 3, 27, 65, 1, 30, 45, 33, 47, 90, 4, 10, 69, 35, 5, 51, 2, 9, 23, 16, 74, 56, 11, 6, 52, 72, 63, 68, 92, 44, 15, 99, 80, 20, 13, 22, 61, 50, 55, 24, 0, 77, 39, 98, 85, 53, 73, 86, 81, 62, 97, 40, 78, 89, 17, 58, 21, 34, 70, 59, 84, 91, 32, 49, 19, 57, 66, 37, 83, 54, 76, 96, 12, 46, 75, 67, 93, 8, 94, 79, 25, 95, 71, 60, 36, 48, 29, 18, 41, 87, 82, 14, 88, 26, 38, 43, 42, 31)
その距離は 4329.349648801185
Suspended
        9.34 real        18.13 user         0.53 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala TspPar 10 100

===都市数が少ないとparメソッドをつけるメリットがないことの証明===
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala Tsp 8 1000
解は List(6, 4, 5, 3, 7, 0, 1, 2)
その距離は 7.0
Suspended
        3.23 real         2.83 user         0.33 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala TspPar 8 1000
解は List(6, 4, 5, 3, 7, 0, 1, 2)
その距離は 7.0
Suspended
        4.09 real         5.32 user         0.58 sys


================8/2================

scalaが実行時にCPUのコア数を指定できるのかを確認する ===> ん〜．．．

/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala TspCol 1 1000 100.dat
解は List(35, 11, 14, 4, 68, 32, 51, 39, 83, 50, 45, 63, 1, 97, 38, 95, 73, 85, 21, 3, 33, 81, 79, 40, 71, 16, 62, 74, 88, 25, 7, 26, 57, 43, 56, 22, 76, 28, 70, 84, 94, 77, 46, 72, 36, 86, 66, 48, 92, 67, 18, 53, 27, 60, 99, 24, 89, 0, 19, 47, 15, 90, 91, 20, 34, 82, 58, 10, 87, 80, 12, 37, 23, 2, 93, 8, 59, 55, 61, 42, 96, 31, 17, 54, 44, 6, 49, 65, 41, 29, 69, 64, 13, 75, 30, 9, 52, 98, 5, 78)
その距離は 42951.557807102174
Suspended
       55.73 real       138.58 user         1.96 sys
/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala TspPar 1 1000 100.dat
解は List(35, 11, 14, 4, 68, 32, 51, 39, 83, 50, 45, 63, 1, 97, 38, 95, 73, 85, 21, 3, 33, 81, 79, 40, 71, 16, 62, 74, 88, 25, 7, 26, 57, 43, 56, 22, 76, 28, 70, 84, 94, 77, 46, 72, 36, 86, 66, 48, 92, 67, 18, 53, 27, 60, 99, 24, 89, 0, 19, 47, 15, 90, 91, 20, 34, 82, 58, 10, 87, 80, 12, 37, 23, 2, 93, 8, 59, 55, 61, 42, 96, 31, 17, 54, 44, 6, 49, 65, 41, 29, 69, 64, 13, 75, 30, 9, 52, 98, 5, 78)
その距離は 42951.557807102174
Suspended
       67.12 real       151.34 user         2.10 sys

================8/3================

幾つかのメソッドをカリー化した

/Users/e135761/parallel/TSP/TSP% /usr/bin/time scala TspCol 1 1000 100.dat
解は List(35, 11, 14, 4, 68, 32, 51, 39, 83, 50, 45, 63, 1, 97, 38, 95, 73, 85, 21, 3, 33, 81, 79, 40, 71, 16, 62, 74, 88, 25, 7, 26, 57, 43, 56, 22, 76, 28, 70, 84, 94, 77, 46, 72, 36, 86, 66, 48, 92, 67, 18, 53, 27, 60, 99, 24, 89, 0, 19, 47, 15, 90, 91, 20, 34, 82, 58, 10, 87, 80, 12, 37, 23, 2, 93, 8, 59, 55, 61, 42, 96, 31, 17, 54, 44, 6, 49, 65, 41, 29, 69, 64, 13, 75, 30, 9, 52, 98, 5, 78)
その距離は 42951.557807102174
Suspended
       67.27 real       154.97 user         2.18 sys


================8/9================


       (scala.actors.Actor.self) ! best.toList
      for (i <- 0 until genNum) (samplepoint !! routes(i))//.asInstanceOf[List[Int]]
The distance is 12647.095204766338
       28.40 real        83.37 user         1.07 sys

                (scala.actors.Actor.self) !! best.toList
      for (i <- 0 until genNum) (samplepoint !! routes(i))//.asInstanceOf[List[Int]]
The distance is 12647.095204766338
       65.67 real       223.14 user         1.52 sys


                (scala.actors.Actor.self) ! best.toList
      for (i <- 0 until genNum) (samplepoint ! routes(i))//.asInstanceOf[List[Int]]
The distance is 12647.095204766338
       28.40 real        83.47 user         1.12 sys

                (scala.actors.Actor.self) !! best.toList
      for (i <- 0 until genNum) (samplepoint ! routes(i))//.asInstanceOf[List[Int]]
The distance is 12647.095204766338
       64.07 real       221.62 user         0.98 sys

3番目を採用
